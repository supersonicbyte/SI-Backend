const db = require('./index');

// runs on server start

/*
const tableExists = "SELECT * FROM TEST";
const createTestTable = "CREATE TABLE TEST(NAME TEXT NOT NULL)";
const insertTest = "INSERT INTO TEST(NAME) VALUES ($1)";
*/

const tableExists = "SELECT * FROM Question";
const resetdb = `
DROP TABLE IF EXISTS Question_Answer CASCADE;
DROP TABLE IF EXISTS UserResponse CASCADE;
DROP TABLE IF EXISTS FADevice CASCADE;
DROP TABLE IF EXISTS Question CASCADE;
DROP TABLE IF EXISTS Campaign CASCADE;
DROP TABLE IF EXISTS Answer CASCADE;
`
const generateDB = `

--**********************************************************************
--	Tables
--**********************************************************************

-- Table Answer
CREATE TABLE
	Answer
(
	AnswerID SERIAL NOT NULL
	, AnswerText TEXT NOT NULL
	, IsImage BOOLEAN NOT NULL
    , Base64 VARCHAR(30000) NULL
,
CONSTRAINT Pk_Answer_AnswerID PRIMARY KEY
(
	AnswerID
)
);

-- Table Campaign
CREATE TABLE
	Campaign
(
	CampaignID SERIAL NOT NULL
	, Name VARCHAR(300) NOT NULL
	, StartDate DATE NOT NULL
	, EndDate DATE NOT NULL
,
CONSTRAINT Pk_Campaign_CampaignID PRIMARY KEY
(
	CampaignID
)
);

-- Table FADevice
CREATE TABLE
	FADevice
(
	DeviceID SERIAL NOT NULL
	, CampaignID INT NOT NULL
    , DeviceName VARCHAR(300) NULL
	, InstallationCode VARCHAR(300) NULL
    , DependentQuestionID INT NULL
,
CONSTRAINT Pk_FADevice_DeviceID PRIMARY KEY
(
	DeviceID
)
);

-- Table Question
CREATE TABLE
	Question
(
	QuestionID SERIAL NOT NULL
	, QuestionType varchar(300) NOT NULL
	, Data1 TEXT NULL
	, Data2 TEXT NULL
	, Data3 TEXT NULL
	, QuestionText TEXT NOT NULL
	, IsDependent BOOLEAN NOT NULL
	, CampaignID INT NOT NULL
,
CONSTRAINT Pk_Question_QuestionID PRIMARY KEY
(
	QuestionID
)
);

-- Table QuestionAnswer
CREATE TABLE
	Question_Answer
(
	ID SERIAL NOT NULL
	, AnswerID INT 
	, QuestionID INT NOT NULL
,
CONSTRAINT Pk_QuestionAnswer_ID PRIMARY KEY
(
	ID
)
);

-- Table UserResponse
CREATE TABLE
	UserResponse
(
	ResponseID SERIAL NOT NULL
	, CustomAnswer TEXT NULL
	, QuestionID INT NOT NULL
	, AnswerID INT
    , DeviceID INT NOT NULL
    , Date Date Default Current_Timestamp
,
CONSTRAINT Pk_UserResponse_ResponseID PRIMARY KEY
(
	ResponseID
)
);
--**********************************************************************
--	Data
--**********************************************************************
--**********************************************************************
--	Relationships
--**********************************************************************

-- Relationship Fk_Campaign_FADevice_CampaignID
ALTER TABLE FADevice
ADD CONSTRAINT Fk_Campaign_FADevice_CampaignID FOREIGN KEY (CampaignID) REFERENCES Campaign (CampaignID) ON DELETE CASCADE;


-- Relationship Fk_Campaign_Question_CampaignID
ALTER TABLE Question
ADD CONSTRAINT Fk_Campaign_Question_CampaignID FOREIGN KEY (CampaignID) REFERENCES Campaign (CampaignID) ON DELETE CASCADE;

-- Relationship Fk_Device_Question_QuestionID
ALTER TABLE FADevice
ADD CONSTRAINT Fk_Device_Question_QuestionID FOREIGN KEY (DependentQuestionID) REFERENCES Question (QuestionID) ON DELETE CASCADE;


-- Relationship Fk_Answer_QuestionAnswer_AnswerID
ALTER TABLE Question_Answer
ADD CONSTRAINT Fk_Answer_QuestionAnswer_AnswerID FOREIGN KEY (AnswerID) REFERENCES Answer (AnswerID) ON DELETE CASCADE;


-- Relationship Fk_Question_QuestionAnswer_QuestionID
ALTER TABLE Question_Answer
ADD CONSTRAINT Fk_Question_QuestionAnswer_QuestionID FOREIGN KEY (QuestionID) REFERENCES Question (QuestionID) ON DELETE CASCADE;


-- Relationship Fk_Question_UserResponse_QuestionID
ALTER TABLE UserResponse
ADD CONSTRAINT Fk_Question_UserResponse_QuestionID FOREIGN KEY (QuestionID) REFERENCES Question (QuestionID) ON DELETE CASCADE;

-- Relationship Fk_Question_UserResponse_DeviceID
ALTER TABLE UserResponse
ADD CONSTRAINT Fk_Question_UserResponse_DeviceID FOREIGN KEY (DeviceID) REFERENCES FADevice (DeviceID) ON DELETE CASCADE;


-- Relationship Fk_Answer_UserResponse_AnswerID
ALTER TABLE UserResponse
ADD CONSTRAINT Fk_Answer_UserResponse_AnswerID FOREIGN KEY (AnswerID) REFERENCES Answer (AnswerID) ON DELETE CASCADE;

`

module.exports.resetDB = async function resetDB() {
    try {
        await db.pool.query(resetdb);
        console.log("Reseting database\n");
    } catch (error) {
        console.log("Error while reseting\n", error);
        return;
    }
};

module.exports.createDB = async function createDB() {


    /*try {
        const exist = await db.pool.query(tableExists);
        // table already exists
        if (exist) return;
    } catch (error) {
        console.log("Database Exists Already");
    }*/

    try {
        const res = await db.pool.query(generateDB);
        console.log("Generating a new database");
    } catch (error) {
        console.log("Error while generating\n ", error);
    }


}

module.exports.fillDB = async function fillDB() {

    const fill = `
    TRUNCATE TABLE Campaign cascade;
    TRUNCATE TABLE Answer cascade;
    TRUNCATE TABLE Question cascade;
    TRUNCATE TABLE FADevice cascade;
    TRUNCATE TABLE UserResponse cascade;
    TRUNCATE TABLE Question_Answer cascade;

    ALTER SEQUENCE answer_answerid_seq RESTART WITH 1;
    ALTER SEQUENCE campaign_campaignid_seq RESTART WITH 1;
    ALTER SEQUENCE question_questionid_seq RESTART WITH 1;
    ALTER SEQUENCE fadevice_deviceid_seq RESTART WITH 1;
    ALTER SEQUENCE question_questionid_seq RESTART WITH 1;
    ALTER SEQUENCE userresponse_responseid_seq RESTART WITH 1;


    INSERT INTO Campaign (name, startdate, enddate) VALUES ( 'Zadovoljstvo korisnika sa na≈°im proizvodima', To_Date('21-05-2021', 'dd-mm-yyyy'), To_Date('21-05-2021', 'dd-mm-yyyy'));
    INSERT INTO FADevice ( DeviceName, CampaignID, InstallationCode) VALUES ('grupa1', 1, 'spaha1');
    INSERT INTO FADevice ( DeviceName, CampaignID, InstallationCode) VALUES ('grupa2', 1, 'spaha2');

    INSERT INTO Campaign (name, startdate, enddate) VALUES ( 'Pitanja o namirnicama', To_Date('01-03-2021', 'dd-mm-yyyy'), To_Date('18-08-2021', 'dd-mm-yyyy'));
    INSERT INTO FADevice ( DeviceName, CampaignID, InstallationCode) VALUES ('grupa3', 1, 'spaha3');

    Insert into Answer(AnswerId,AnswerText,IsImage) values (-1,' ',false);
    
    Insert into Answer(AnswerText,IsImage,Base64) values ('Musko',true,'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'); --1
    Insert into Answer(AnswerText,IsImage,Base64) values ('Zensko',true,''); --2
    
    Insert into Answer(AnswerText,IsImage) values ('5',false); --3
    
    Insert into Answer(AnswerText,IsImage,Base64) values ('Jabuka',true,'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');
    Insert into Answer(AnswerText,IsImage,Base64) values ('Kruska',true,'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'); --5
    Insert into Answer(AnswerText,IsImage,Base64) values ('Jagoda',true,'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'); --6
    Insert into Answer(AnswerText,IsImage,Base64) values ('Lubenica',true,''); --7

    Insert into Answer(AnswerText,IsImage) values ('Da',false); --8
    Insert into Answer(AnswerText,IsImage) values ('Ne',false); --9
    Insert into Answer(AnswerText,IsImage) values ('5',false); --10
    Insert into Answer(AnswerText,IsImage) values ('Da',false); --11
    Insert into Answer(AnswerText,IsImage) values ('Ne',false); --12
    Insert into Answer(AnswerText,IsImage) values ('Krompir',false); --13
    Insert into Answer(AnswerText,IsImage) values ('Krastavac',false); --14
    Insert into Answer(AnswerText,IsImage) values ('Luk',false); --15
    Insert into Answer(AnswerText,IsImage) values ('Paprika',false); --16
    Insert into Answer(AnswerText,IsImage) values ('Kupus',false); --17
    Insert into Answer(AnswerText,IsImage) values ('Mrkva',false); --18

    Insert into Answer(AnswerText,IsImage) values ('Da',false); --19
    Insert into Answer(AnswerText,IsImage) values ('Ne',false); --20
    Insert into Answer(AnswerText,IsImage) values ('10',false); --21

    Insert into Answer(AnswerText,IsImage) values ('Pivo',false); --22
    Insert into Answer(AnswerText,IsImage) values ('Rakija',false); --23
    Insert into Answer(AnswerText,IsImage) values ('Jeger',false); --24
    Insert into Answer(AnswerText,IsImage) values ('Vodka',false); --25
    Insert into Answer(AnswerText,IsImage) values ('≈†tok',false); --26
    Insert into Answer(AnswerText,IsImage) values ('Viski',false); --27
    Insert into Answer(AnswerText,IsImage) values ('D≈æin',false); --28
    Insert into Answer(AnswerText,IsImage) values ('Viljamovka',false); --29
    Insert into Answer(AnswerText,IsImage) values ('Vi≈°nja',false); --30
    Insert into Answer(AnswerText,IsImage) values ('Liker',false); --31



    Insert into Answer(AnswerText,IsImage) values ('<18',false); --14
    Insert into Answer(AnswerText,IsImage) values ('18-25',false); --15
    Insert into Answer(AnswerText,IsImage) values ('26-40',false); --16
    Insert into Answer(AnswerText,IsImage) values ('41-65',false); --17
    Insert into Answer(AnswerText,IsImage) values ('>66',false); --18



   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Single','Kojeg ste spola?',false,null,null,null,1);--1
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Scale','Koliko volite voce?',false,null,null,null,1);--2
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Multiple','Koje voce volite?',false,null,null,null,1);--3
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Text','Sta mislite o ovome upitu?',false,null,null,null,1);--4

   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Single','Da li ste pronasli proizvode koje ste namjeravli kupiti?',false,null,null,null,2);--5
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Scale','Koliko ste zadovoljni cijenama?',false,null,null,null,2);--6
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Multiple','Koje povrce najvise kupujete?',false,null,null,null,2);--7
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Text','Koje proizvode najcesce kupujete i zasto?',false,null,null,null,2);--8

   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Single','Da li konzumirate alkohol?',false,null,null,null,1);--9
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Scale','Ocijenite Va≈°e iskustvo kupovine u ovoj poslovnici.!',false,null,null,null,1);--10
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Multiple','Koja alkoholna piƒáa konzumirate?',false,null,null,null,1);--11
   Insert into Question(QuestionType,QuestionText,IsDependent,Data1,Data2,Data3,CampaignID) values('Text','Koliko cesto idete u nabavku?',false,null,null,null,1);--12



   Insert into Question_Answer(QuestionID,AnswerID) values(1,1);
   Insert into Question_Answer(QuestionID,AnswerID) values(1,2);

   Insert into Question_Answer(QuestionID,AnswerID) values(2,3);

   Insert into Question_Answer(QuestionID,AnswerID) values(3,4);
   Insert into Question_Answer(QuestionID,AnswerID) values(3,5);
   Insert into Question_Answer(QuestionID,AnswerID) values(3,6);
   Insert into Question_Answer(QuestionID,AnswerID) values(3,7);

   Insert into Question_Answer(QuestionID,AnswerID) values(5,8);
   Insert into Question_Answer(QuestionID,AnswerID) values(5,9);
   Insert into Question_Answer(QuestionID,AnswerID) values(6,10);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,13);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,14);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,15);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,16);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,17);
   Insert into Question_Answer(QuestionID,AnswerID) values(7,18);

   Insert into Question_Answer(QuestionID,AnswerID) values(9,19);
   Insert into Question_Answer(QuestionID,AnswerID) values(9,20);
   Insert into Question_Answer(QuestionID,AnswerID) values(10,21);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,22);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,23);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,24);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,25);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,26);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,27);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,28);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,29);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,30);
   Insert into Question_Answer(QuestionID,AnswerID) values(11,31);


   



  -- Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,4,null,1);
  -- Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,4,null,2);
  -- Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,5,null,1);
  --Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,5,null,2);
  --Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,6,null,1);
  -- Insert into UserResponse(QuestionID,AnswerID,CustomAnswer,DeviceID) values(3,6,null,2);

    `;

    try {
        const exist = await db.pool.query(tableExists);
        if (!exist) return;

        console.log(exist.rowCount);

        if (exist.rowCount == 0) {
            await db.pool.query(fill);
            console.log("Filling DB with data");
            return;
        }

    } catch (error) {
        console.log("Error while filling ", error);
        return;
    }




}